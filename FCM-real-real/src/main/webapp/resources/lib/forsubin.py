# -*- coding: utf-8 -*-
"""rayoung.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gDlQAxb2pPHDlvwlLr0y4SmooQ40ZpFa
"""

import sys
sys.path.append('/var/lib/tomcat8/webapps/FCM/resources/lib')
from sklearn import linear_model
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import pandas as pd
import pymysql
import datetime as dt
from datetime import datetime, timedelta


con = pymysql.connect(host="fcmdb.cahco6pth77g.ap-northeast-2.rds.amazonaws.com", user="FCM_RDS", password="wjdxhd0603~!", db="FCM", charset='utf8', cursorclass=pymysql.cursors.DictCursor)
cur = con.cursor()

def wasteA() :
  sql="select * from A_amount order by date DESC"
  cur.execute(sql)
  
  rows = cur.fetchmany(20)
  df = pd.DataFrame(rows)
  df.date = pd.to_datetime(df.date)

  first_df = pd.DataFrame(rows)
  first_df.date = pd.to_datetime(df.date)

  

  border = 55
  for i in range(0,int(df.remain.count()-1)):
   if df.remain[i+1] < border:
      df.remain[i] = df.remain[i]-df.remain[i+1]
   else :
      df.remain[i]=df.remain[i]

  df = df.sort_index(ascending=False)
  regr = linear_model.LinearRegression()
  regr.fit(df.date.values.reshape(-1, 1), df.remain)

  ax = df.plot(x='date', y='remain', color='black', style='.')

  tomorrow = df.date[0]+timedelta(days=1)
  thedaynexttom = df.date[0]+timedelta(days=2)

  df1 = pd.DataFrame({
   "remain" : [0,0],
   "date" : [tomorrow,thedaynexttom]
  })
  df = df.append(df1)


  y_pred = regr.predict(df.date.values.astype(float).reshape(-1, 1))
  df['pred'] = y_pred

  tomorrow_df = df[df['date']==tomorrow]
  df.plot(x='date', y='pred', color='orange', linewidth=3, ax=ax, alpha=0.5)
  x = tomorrow
  y = df[df['date']==tomorrow]['pred']
  ax.scatter(x,y,color = 'red')
  ax.set_title('Prediction of WasteA Remain')
  ax.set_xlabel('Date')
  ax.set_ylabel('Remain')

  plt.savefig('WasteA.png')
  plt.show()

  to_remain = df[df['date']==tomorrow]['pred']

  if(first_df.remain[0] < border):
    print(to_remain + first_df.remain[0])
    return to_remain + first_df.remain[0]
  else :
    print(to_remain)
    return to_remain


def wasteB() :
  sql="select * from B_amount order by date DESC"
  cur.execute(sql)
  
  rows = cur.fetchmany(20)
  df = pd.DataFrame(rows)
  df.date = pd.to_datetime(df.date)

  first_df = pd.DataFrame(rows)
  first_df.date = pd.to_datetime(df.date)

  

  border = 70
  for i in range(0,int(df.remain.count()-1)):
   if df.remain[i+1] < border:
      df.remain[i] = df.remain[i]-df.remain[i+1]
   else :
      df.remain[i]=df.remain[i]

  df = df.sort_index(ascending=False)
  regr = linear_model.LinearRegression()
  regr.fit(df.date.values.reshape(-1, 1), df.remain)

  ax = df.plot(x='date', y='remain', color='black', style='.')

  tomorrow = df.date[0]+timedelta(days=1)
  thedaynexttom = df.date[0]+timedelta(days=2)

  df1 = pd.DataFrame({
   "remain" : [0,0],
   "date" : [tomorrow,thedaynexttom]
  })
  df = df.append(df1)


  y_pred = regr.predict(df.date.values.astype(float).reshape(-1, 1))
  df['pred'] = y_pred

  tomorrow_df = df[df['date']==tomorrow]
  df.plot(x='date', y='pred', color='orange', linewidth=3, ax=ax, alpha=0.5)
  x = tomorrow
  y = df[df['date']==tomorrow]['pred']
  ax.scatter(x,y,color = 'red')
  ax.set_title('Prediction of WasteB Remain')
  ax.set_xlabel('Date')
  ax.set_ylabel('Remain')

  plt.savefig('WasteB.png')
  plt.show()

  to_remain = df[df['date']==tomorrow]['pred']
  if(first_df.remain[0] < border):
    print(to_remain + first_df.remain[0])
    return to_remain + first_df.remain[0]
  else :
    print(to_remain)
    return to_remain


def wasteC() :
  sql="select * from C_amount order by date DESC"
  cur.execute(sql)
  
  rows = cur.fetchmany(20)
  df = pd.DataFrame(rows)
  df.date = pd.to_datetime(df.date)

  first_df = pd.DataFrame(rows)
  first_df.date = pd.to_datetime(df.date)

  

  border = 55
  for i in range(0,int(df.remain.count()-1)):
   if df.remain[i+1] < border:
      df.remain[i] = df.remain[i]-df.remain[i+1]
   else :
      df.remain[i]=df.remain[i]

  df = df.sort_index(ascending=False)
  regr = linear_model.LinearRegression()
  regr.fit(df.date.values.reshape(-1, 1), df.remain)

  ax = df.plot(x='date', y='remain', color='black', style='.')

  tomorrow = df.date[0]+timedelta(days=1)
  thedaynexttom = df.date[0]+timedelta(days=2)

  df1 = pd.DataFrame({
   "remain" : [0,0],
   "date" : [tomorrow,thedaynexttom]
  })
  df = df.append(df1)


  y_pred = regr.predict(df.date.values.astype(float).reshape(-1, 1))
  df['pred'] = y_pred

  tomorrow_df = df[df['date']==tomorrow]
  df.plot(x='date', y='pred', color='orange', linewidth=3, ax=ax, alpha=0.5)
  x = tomorrow
  y = df[df['date']==tomorrow]['pred']
  ax.scatter(x,y,color = 'red')
  ax.set_title('Prediction of WasteC Remain')
  ax.set_xlabel('Date')
  ax.set_ylabel('Remain')

  plt.savefig('WasteC.png')
  plt.show()

  to_remain = df[df['date']==tomorrow]['pred']
  if(first_df.remain[0] < border):
    print(to_remain + first_df.remain[0])
    return to_remain + first_df.remain[0]
  else :
    print(to_remain)
    return to_remain


def wasteD() :
  sql="select * from D_amount order by date DESC"
  cur.execute(sql)
  
  rows = cur.fetchmany(20)
  df = pd.DataFrame(rows)
  df.date = pd.to_datetime(df.date)

  first_df = pd.DataFrame(rows)
  first_df.date = pd.to_datetime(df.date)

  

  border = 55
  for i in range(0,int(df.remain.count()-1)):
   if df.remain[i+1] < border:
      df.remain[i] = df.remain[i]-df.remain[i+1]
   else :
      df.remain[i]=df.remain[i]

  df = df.sort_index(ascending=False)
  regr = linear_model.LinearRegression()
  regr.fit(df.date.values.reshape(-1, 1), df.remain)

  ax = df.plot(x='date', y='remain', color='black', style='.')

  tomorrow = df.date[0]+timedelta(days=1)
  thedaynexttom = df.date[0]+timedelta(days=2)

  df1 = pd.DataFrame({
   "remain" : [0,0],
   "date" : [tomorrow,thedaynexttom]
  })
  df = df.append(df1)


  y_pred = regr.predict(df.date.values.astype(float).reshape(-1, 1))
  df['pred'] = y_pred

  tomorrow_df = df[df['date']==tomorrow]
  df.plot(x='date', y='pred', color='orange', linewidth=3, ax=ax, alpha=0.5)
  x = tomorrow
  y = df[df['date']==tomorrow]['pred']
  ax.scatter(x,y,color = 'red')
  ax.set_title('Prediction of WasteD Remain')
  ax.set_xlabel('Date')
  ax.set_ylabel('Remain')

  plt.savefig('WasteD.png')
  plt.show()

  to_remain = df[df['date']==tomorrow]['pred']
  if(first_df.remain[0] < border):
    print(to_remain + first_df.remain[0])
    return to_remain + first_df.remain[0]
  else :
    print(to_remain)
    return to_remain



def wasteE() :
  sql="select * from E_amount order by date DESC"
  cur.execute(sql)
  
  rows = cur.fetchmany(20)
  df = pd.DataFrame(rows)
  df.date = pd.to_datetime(df.date)

  first_df = pd.DataFrame(rows)
  first_df.date = pd.to_datetime(df.date)

  

  border = 60
  for i in range(0,int(df.remain.count()-1)):
   if df.remain[i+1] < border:
      df.remain[i] = df.remain[i]-df.remain[i+1]
   else :
      df.remain[i]=df.remain[i]

  df = df.sort_index(ascending=False)
  regr = linear_model.LinearRegression()
  regr.fit(df.date.values.reshape(-1, 1), df.remain)

  ax = df.plot(x='date', y='remain', color='black', style='.')

  tomorrow = df.date[0]+timedelta(days=1)
  thedaynexttom = df.date[0]+timedelta(days=2)

  df1 = pd.DataFrame({
   "remain" : [0,0],
   "date" : [tomorrow,thedaynexttom]
  })
  df = df.append(df1)


  y_pred = regr.predict(df.date.values.astype(float).reshape(-1, 1))
  df['pred'] = y_pred

  tomorrow_df = df[df['date']==tomorrow]
  df.plot(x='date', y='pred', color='orange', linewidth=3, ax=ax, alpha=0.5)
  x = tomorrow
  y = df[df['date']==tomorrow]['pred']
  ax.scatter(x,y,color = 'red')
  ax.set_title('Prediction of WasteE Remain')
  ax.set_xlabel('Date')
  ax.set_ylabel('Remain')

  plt.savefig('WasteE.png')
  plt.show()

  to_remain = df[df['date']==tomorrow]['pred']
  if(first_df.remain[0] < border):
    print(to_remain + first_df.remain[0])
    return to_remain + first_df.remain[0]
  else :
    print(to_remain)
    return to_remain






con.close()